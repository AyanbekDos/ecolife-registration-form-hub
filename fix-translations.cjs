// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è JSON-—Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
const fs = require('fs');
const path = require('path');

// –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
const translationsDir = path.join(__dirname, 'src', 'translations');

// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö JSON-—Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
const files = fs.readdirSync(translationsDir)
  .filter(file => file.endsWith('.json') && file !== '.translation-hashes.json');

console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤`);

// –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
let totalFilesFixed = 0;
let totalErrors = 0;

// –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–π —Ñ–∞–π–ª kk.json
const sourceFilePath = path.join(translationsDir, 'kk.json');
let sourceData;

try {
  const sourceContent = fs.readFileSync(sourceFilePath, 'utf8');
  sourceData = JSON.parse(sourceContent);
  console.log('‚úÖ –≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Ñ–∞–π–ª kk.json —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
} catch (error) {
  console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ kk.json: ${error.message}`);
  process.exit(1);
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
files.forEach(file => {
  if (file === 'kk.json') return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
  
  const filePath = path.join(translationsDir, file);
  
  try {
    // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    let content = fs.readFileSync(filePath, 'utf8');
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
    let fileData;
    let isValid = true;
    
    try {
      fileData = JSON.parse(content);
    } catch (parseError) {
      console.log(`‚ùå ${file}: JSON –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: ${parseError.message}`);
      isValid = false;
    }
    
    // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–∞–ª–æ–Ω—É
    if (!isValid || !validateStructure(fileData, sourceData)) {
      console.log(`üîÑ ${file}: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞...`);
      
      // –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø —Ñ–∞–π–ª–∞
      const backupPath = path.join(translationsDir, `${file}.bak`);
      fs.writeFileSync(backupPath, content, 'utf8');
      console.log(`üì¶ ${file}: –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è`);
      
      // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
      if (!isValid) {
        try {
          // –ü—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–∞–≤—ã—á–∫–∞–º–∏
          content = content
            .replace(/""([^"]*)""/, '"\\\"$1\\\""')
            .replace(/"Platform under construction"/g, '"Platform under construction"')
            .replace(/"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"/g, '"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"')
            .replace(/"Platforma tiek b≈´vƒìta"/g, '"Platforma tiek b≈´vƒìta"')
            .replace(/"Piattaforma in costruzione"/g, '"Piattaforma in costruzione"')
            .replace(/"Plattform im Aufbau"/g, '"Plattform im Aufbau"')
            .replace(/\\"/g, '"') // –£–±–∏—Ä–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            .replace(/",\s*\\"/g, '", "') // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É –∫–ª—é—á–∞–º–∏
            .replace(/"\s*}/g, '" }') // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏
            .replace(/"\s*{/g, '" {') // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏
            .replace(/"\s*,/g, '",') // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—è—Ç—ã–µ
            .replace(/"\s*:/g, '":') // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–æ–µ—Ç–æ—á–∏—è
            .replace(/:\s*"/g, ':"'); // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–æ–µ—Ç–æ—á–∏—è —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
          
          try {
            fileData = JSON.parse(content);
            console.log(`‚úÖ ${file}: JSON —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
          } catch (error) {
            console.log(`‚ùå ${file}: –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ —ç—Ç–∞–ª–æ–Ω–∞`);
            fileData = {}; // –ü—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑ —ç—Ç–∞–ª–æ–Ω–∞
          }
        } catch (error) {
          console.log(`‚ùå ${file}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ JSON: ${error.message}`);
          fileData = {}; // –ü—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑ —ç—Ç–∞–ª–æ–Ω–∞
        }
      }
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
      const newData = createStructureFromTemplate(fileData, sourceData);
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      fs.writeFileSync(filePath, JSON.stringify(newData, null, 2), 'utf8');
      console.log(`‚úÖ ${file}: –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω`);
      
      totalFilesFixed++;
    } else {
      console.log(`‚úÖ ${file}: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–∞–ª–æ–Ω—É`);
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${file}: ${error.message}`);
    totalErrors++;
  }
});

console.log(`\nüìä –ò—Ç–æ–≥–∏:`);
console.log(`üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length - 1}`); // -1 –¥–ª—è kk.json
console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${totalFilesFixed}`);
console.log(`‚ùå –û—à–∏–±–æ–∫: ${totalErrors}`);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
function validateStructure(obj, template, path = '') {
  if (!obj) return false;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–ª—é—á–∏ –≤ —à–∞–±–ª–æ–Ω–µ
  for (const key in template) {
    const currentPath = path ? `${path}.${key}` : key;
    
    // –ï—Å–ª–∏ –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–º –æ–±—ä–µ–∫—Ç–µ
    if (!(key in obj)) {
      console.log(`‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á: ${currentPath}`);
      return false;
    }
    
    // –ï—Å–ª–∏ —Ç–∏–ø—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
    if (typeof template[key] !== typeof obj[key]) {
      console.log(`‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è –∫–ª—é—á–∞ ${currentPath}: –æ–∂–∏–¥–∞–µ—Ç—Å—è ${typeof template[key]}, –ø–æ–ª—É—á–µ–Ω–æ ${typeof obj[key]}`);
      return false;
    }
    
    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤
    if (typeof template[key] === 'object' && template[key] !== null && 
        typeof obj[key] === 'object' && obj[key] !== null) {
      // –î–ª—è –º–∞—Å—Å–∏–≤–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
      if (Array.isArray(template[key])) {
        if (!Array.isArray(obj[key])) {
          console.log(`‚ö†Ô∏è –û–∂–∏–¥–∞–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ –¥–ª—è –∫–ª—é—á–∞ ${currentPath}`);
          return false;
        }
        
        // –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ —à–∞–±–ª–æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–æ–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        if (template[key].length > 0 && obj[key].length > 0) {
          if (typeof template[key][0] === 'object' && template[key][0] !== null) {
            for (let i = 0; i < obj[key].length; i++) {
              if (!validateStructure(obj[key][i], template[key][0], `${currentPath}[${i}]`)) {
                return false;
              }
            }
          }
        }
      } else {
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–ª—é—á–∏
        if (!validateStructure(obj[key], template[key], currentPath)) {
          return false;
        }
      }
    }
  }
  
  return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
function createStructureFromTemplate(obj, template) {
  const result = {};
  
  // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞
  for (const key in template) {
    // –ï—Å–ª–∏ –∫–ª—é—á –µ—Å—Ç—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ –∏ —Ç–∏–ø—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç
    if (key in obj && typeof template[key] === typeof obj[key]) {
      if (typeof template[key] === 'object' && template[key] !== null) {
        // –î–ª—è –º–∞—Å—Å–∏–≤–æ–≤
        if (Array.isArray(template[key])) {
          if (Array.isArray(obj[key])) {
            // –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ —à–∞–±–ª–æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–æ–π, —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            if (template[key].length > 0 && typeof template[key][0] === 'object' && template[key][0] !== null) {
              result[key] = obj[key].map(item => 
                typeof item === 'object' && item !== null 
                  ? createStructureFromTemplate(item, template[key][0])
                  : item
              );
            } else {
              result[key] = [...obj[key]];
            }
          } else {
            result[key] = [...template[key]];
          }
        } else {
          // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
          result[key] = createStructureFromTemplate(obj[key], template[key]);
        }
      } else {
        // –î–ª—è –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤
        result[key] = obj[key];
      }
    } else {
      // –ï—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç –∏–ª–∏ —Ç–∏–ø—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ —à–∞–±–ª–æ–Ω–∞
      if (typeof template[key] === 'object' && template[key] !== null) {
        if (Array.isArray(template[key])) {
          result[key] = [...template[key]];
        } else {
          result[key] = createStructureFromTemplate({}, template[key]);
        }
      } else {
        result[key] = template[key];
      }
    }
  }
  
  return result;
}
