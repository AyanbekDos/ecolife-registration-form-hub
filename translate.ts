import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import axios from 'axios';
import dotenv from 'dotenv';
import crypto from 'crypto';
import { Translations } from './src/translations/types';

// –ü–æ–ª—É—á–µ–Ω–∏–µ __dirname –¥–ª—è ES –º–æ–¥—É–ª–µ–π
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
dotenv.config();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–∞ Google Translate
const GOOGLE_API_KEY = process.env.GOOGLE_API_KEY;
if (!GOOGLE_API_KEY) {
  console.error('‚ùå –û—à–∏–±–∫–∞: GOOGLE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
  process.exit(1);
}

// –¶–µ–ª–µ–≤—ã–µ —è–∑—ã–∫–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
const targetLangs = [
  'en', 'ru', 'de', 'fr', 'tr', 'pl', 'it', 'es', 'pt', 'nl',
  'bg', 'ro', 'hu', 'el', 'cs', 'sk', 'sl', 'hr', 'sr', 'bs',
  'mk', 'sq', 'lv', 'lt', 'et'
];

// –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
const translationsDir = path.join(__dirname, 'src', 'translations');

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ö–µ—à–∞–º–∏ —Å—Ç—Ä–æ–∫
const hashesFilePath = path.join(translationsDir, '.translation-hashes.json');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Google Translate API
async function translateText(text: string, targetLang: string): Promise<string> {
  try {
    const response = await axios.get('https://translation.googleapis.com/language/translate/v2', {
      params: {
        q: text,
        target: targetLang,
        source: 'kk', // –ö–∞–∑–∞—Ö—Å–∫–∏–π –∫–∞–∫ –∏—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫
        key: GOOGLE_API_KEY
      }
    });
    
    return response.data.data.translations[0].translatedText;
  } catch (error) {
    if (axios.isAxiosError(error)) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ API –ø–µ—Ä–µ–≤–æ–¥–∞: ${error.message}`);
      if (error.response) {
        console.error(`–°—Ç–∞—Ç—É—Å: ${error.response.status}`);
        console.error(`–î–∞–Ω–Ω—ã–µ: ${JSON.stringify(error.response.data)}`);
      }
    } else {
      console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`);
    }
    return text; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}

// –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –≤ –æ–±—ä–µ–∫—Ç–µ
async function translateObject(obj: any, targetLang: string): Promise<any> {
  const result: any = {};
  
  for (const key in obj) {
    if (Array.isArray(obj[key])) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–∏–≤–æ–≤
      result[key] = [];
      for (const item of obj[key]) {
        if (typeof item === 'string') {
          result[key].push(await translateText(item, targetLang));
        } else if (typeof item === 'object') {
          result[key].push(await translateObject(item, targetLang));
        } else {
          result[key].push(item);
        }
      }
    } else if (typeof obj[key] === 'object' && obj[key] !== null) {
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
      result[key] = await translateObject(obj[key], targetLang);
    } else if (typeof obj[key] === 'string') {
      // –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫
      result[key] = await translateText(obj[key], targetLang);
    } else {
      // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      result[key] = obj[key];
    }
  }
  
  return result;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ö–µ—à–∞ —Å—Ç—Ä–æ–∫–∏
function createHash(str: string): string {
  return crypto.createHash('md5').update(str).digest('hex');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ö–µ—à–µ–π –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –≤ –æ–±—ä–µ–∫—Ç–µ
function createObjectHashes(obj: any, path: string = ''): Record<string, string> {
  const hashes: Record<string, string> = {};
  
  for (const key in obj) {
    const currentPath = path ? `${path}.${key}` : key;
    
    if (Array.isArray(obj[key])) {
      // –î–ª—è –º–∞—Å—Å–∏–≤–æ–≤
      obj[key].forEach((item: any, index: number) => {
        if (typeof item === 'string') {
          hashes[`${currentPath}[${index}]`] = createHash(item);
        } else if (typeof item === 'object' && item !== null) {
          const nestedHashes = createObjectHashes(item, `${currentPath}[${index}]`);
          Object.assign(hashes, nestedHashes);
        }
      });
    } else if (typeof obj[key] === 'object' && obj[key] !== null) {
      // –î–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
      const nestedHashes = createObjectHashes(obj[key], currentPath);
      Object.assign(hashes, nestedHashes);
    } else if (typeof obj[key] === 'string') {
      // –î–ª—è —Å—Ç—Ä–æ–∫
      hashes[currentPath] = createHash(obj[key]);
    }
  }
  
  return hashes;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –ø—É—Ç–∏ –≤ –æ–±—ä–µ–∫—Ç–µ
function getValueByPath(obj: any, path: string): any {
  const parts = path.split('.');
  let current = obj;
  
  for (let i = 0; i < parts.length; i++) {
    const part = parts[i];
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ –º–∞—Å—Å–∏–≤–∞
    if (part.includes('[') && part.includes(']')) {
      const arrayName = part.substring(0, part.indexOf('['));
      const indexStr = part.substring(part.indexOf('[') + 1, part.indexOf(']'));
      const index = parseInt(indexStr, 10);
      
      if (!current[arrayName] || !Array.isArray(current[arrayName])) {
        return undefined;
      }
      
      current = current[arrayName][index];
    } else {
      if (current[part] === undefined) {
        return undefined;
      }
      current = current[part];
    }
  }
  
  return current;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –ø—É—Ç–∏ –≤ –æ–±—ä–µ–∫—Ç–µ
function setValueByPath(obj: any, path: string, value: any): void {
  const parts = path.split('.');
  let current = obj;
  
  for (let i = 0; i < parts.length - 1; i++) {
    const part = parts[i];
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ –º–∞—Å—Å–∏–≤–∞
    if (part.includes('[') && part.includes(']')) {
      const arrayName = part.substring(0, part.indexOf('['));
      const indexStr = part.substring(part.indexOf('[') + 1, part.indexOf(']'));
      const index = parseInt(indexStr, 10);
      
      if (!current[arrayName]) {
        current[arrayName] = [];
      }
      
      if (!current[arrayName][index]) {
        current[arrayName][index] = {};
      }
      
      current = current[arrayName][index];
    } else {
      if (!current[part]) {
        current[part] = {};
      }
      current = current[part];
    }
  }
  
  const lastPart = parts[parts.length - 1];
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ –º–∞—Å—Å–∏–≤–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏
  if (lastPart.includes('[') && lastPart.includes(']')) {
    const arrayName = lastPart.substring(0, lastPart.indexOf('['));
    const indexStr = lastPart.substring(lastPart.indexOf('[') + 1, lastPart.indexOf(']'));
    const index = parseInt(indexStr, 10);
    
    if (!current[arrayName]) {
      current[arrayName] = [];
    }
    
    current[arrayName][index] = value;
  } else {
    current[lastPart] = value;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å—Ç—Ä–æ–∫ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –ø–µ—Ä–µ–≤–æ–¥–µ
async function updateMissingTranslations(
  sourceObj: any, 
  targetObj: any, 
  targetLang: string, 
  path: string = '',
  changedPaths: string[] = []
): Promise<any> {
  const result: any = { ...targetObj };
  
  for (const key in sourceObj) {
    const currentPath = path ? `${path}.${key}` : key;
    
    if (!(key in result)) {
      // –ï—Å–ª–∏ –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ü–µ–ª–µ–≤–æ–º –æ–±—ä–µ–∫—Ç–µ
      if (Array.isArray(sourceObj[key])) {
        // –î–ª—è –º–∞—Å—Å–∏–≤–æ–≤
        result[key] = [];
        for (const item of sourceObj[key]) {
          if (typeof item === 'string') {
            result[key].push(await translateText(item, targetLang));
          } else if (typeof item === 'object') {
            result[key].push(await translateObject(item, targetLang));
          } else {
            result[key].push(item);
          }
        }
      } else if (typeof sourceObj[key] === 'object' && sourceObj[key] !== null) {
        // –î–ª—è –æ–±—ä–µ–∫—Ç–æ–≤
        result[key] = await translateObject(sourceObj[key], targetLang);
      } else if (typeof sourceObj[key] === 'string') {
        // –î–ª—è —Å—Ç—Ä–æ–∫
        result[key] = await translateText(sourceObj[key], targetLang);
      } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        result[key] = sourceObj[key];
      }
      console.log(`  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∫–ª—é—á: ${currentPath}`);
    } else if (typeof sourceObj[key] === 'object' && sourceObj[key] !== null && !Array.isArray(sourceObj[key])) {
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
      result[key] = await updateMissingTranslations(sourceObj[key], result[key], targetLang, currentPath, changedPaths);
    } else if (typeof sourceObj[key] === 'string' && changedPaths.includes(currentPath)) {
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
      console.log(`  üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞: ${currentPath}`);
      result[key] = await translateText(sourceObj[key], targetLang);
    }
  }
  
  return result;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
async function main() {
  console.log('üåê –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    if (!fs.existsSync(translationsDir)) {
      fs.mkdirSync(translationsDir, { recursive: true });
      console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${translationsDir}`);
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –∫–∞–∑–∞—Ö—Å–∫–∏–º –ø–µ—Ä–µ–≤–æ–¥–æ–º
    const sourceFilePath = path.join(translationsDir, 'kk.json');
    if (!fs.existsSync(sourceFilePath)) {
      console.error(`‚ùå –û—à–∏–±–∫–∞: –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª ${sourceFilePath} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      process.exit(1);
    }
    
    const sourceData = JSON.parse(fs.readFileSync(sourceFilePath, 'utf8')) as Translations;
    console.log('üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª kk.json');
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ö–µ—à–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    const currentHashes = createObjectHashes(sourceData);
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ö–µ—à–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    let previousHashes: Record<string, string> = {};
    if (fs.existsSync(hashesFilePath)) {
      try {
        previousHashes = JSON.parse(fs.readFileSync(hashesFilePath, 'utf8'));
        console.log('üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ö–µ—à–∏ —Å—Ç—Ä–æ–∫');
      } catch (e) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ö–µ—à–∏, –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥');
      }
    }
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö –ø—É—Ç–µ–π
    const changedPaths: string[] = [];
    for (const path in currentHashes) {
      if (!previousHashes[path] || previousHashes[path] !== currentHashes[path]) {
        changedPaths.push(path);
      }
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—É—Ç–µ–π
    for (const path in currentHashes) {
      if (!previousHashes[path]) {
        if (!changedPaths.includes(path)) {
          changedPaths.push(path);
        }
      }
    }
    
    if (changedPaths.length > 0) {
      console.log(`üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${changedPaths.length} –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫`);
    } else {
      console.log('‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, –ø–µ—Ä–µ–≤–æ–¥—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã');
    }
    
    // –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –≤—Å–µ —Ü–µ–ª–µ–≤—ã–µ —è–∑—ã–∫–∏
    for (const lang of targetLangs) {
      // –í—Å–µ–≥–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —è–∑—ã–∫–∏, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
      // if (changedPaths.length === 0 && lang !== 'en') {
      //   // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —è–∑—ã–∫–∏, –µ—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π (–∫—Ä–æ–º–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º)
      //   continue;
      // }
      
      const targetFilePath = path.join(translationsDir, `${lang}.json`);
      
      console.log(`\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —è–∑—ã–∫–∞: ${lang}`);
      
      let translatedData: any;
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
      if (fs.existsSync(targetFilePath)) {
        console.log(`  üìÑ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª ${lang}.json`);
        const existingData = JSON.parse(fs.readFileSync(targetFilePath, 'utf8'));
        
        if (changedPaths.length > 0) {
          // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
          console.log(`  üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ (${changedPaths.length})...`);
          translatedData = await updateMissingTranslations(sourceData, existingData, lang, '', changedPaths);
          console.log(`  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
        } else {
          console.log(`  ‚úÖ –§–∞–π–ª –∞–∫—Ç—É–∞–ª–µ–Ω, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`);
          translatedData = existingData;
        }
      } else {
        console.log(`  üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ ${lang}.json`);
        
        // –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        console.log(`  üîÑ –ü–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫...`);
        translatedData = await translateObject(sourceData, lang);
        console.log(`  ‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω`);
      }
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      fs.writeFileSync(targetFilePath, JSON.stringify(translatedData, null, 2), 'utf8');
      console.log(`  üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª: ${lang}.json`);
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ö–µ—à–µ–π –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
    fs.writeFileSync(hashesFilePath, JSON.stringify(currentHashes, null, 2), 'utf8');
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ö–µ—à–∏ —Å—Ç—Ä–æ–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞');
    
    console.log('\n‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–≤–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞: ${error}`);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main();
