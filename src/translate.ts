import fs from 'fs';
import path from 'path';
import axios from 'axios';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';

// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
dotenv.config();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–∞ Google Translate
const GOOGLE_API_KEY = process.env.GOOGLE_API_KEY;
if (!GOOGLE_API_KEY) {
  console.error('‚ùå –û—à–∏–±–∫–∞: GOOGLE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
  process.exit(1);
}

// –¶–µ–ª–µ–≤—ã–µ —è–∑—ã–∫–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
const targetLangs = [
  'en', 'ru', 'de', 'fr', 'tr', 'pl', 'it', 'es', 'pt', 'nl',
  'bg', 'ro', 'hu', 'el', 'cs', 'sk', 'sl', 'hr', 'sr', 'bs',
  'mk', 'sq', 'lv', 'lt', 'et'
];

// –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
const translationsDir = path.join(__dirname, 'translations');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Google Translate API
async function translateText(text: string, targetLang: string): Promise<string> {
  try {
    // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å—Ç—Ä–æ–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (!text || typeof text !== 'string') {
      return text;
    }
    
    const response = await axios.get('https://translation.googleapis.com/language/translate/v2', {
      params: {
        q: text,
        target: targetLang,
        source: 'kk', // –ö–∞–∑–∞—Ö—Å–∫–∏–π –∫–∞–∫ –∏—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫
        key: GOOGLE_API_KEY
      }
    });
    
    return response.data.data.translations[0].translatedText;
  } catch (error) {
    if (axios.isAxiosError(error)) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ API –ø–µ—Ä–µ–≤–æ–¥–∞: ${error.message}`);
      if (error.response) {
        console.error(`–°—Ç–∞—Ç—É—Å: ${error.response.status}`);
        console.error(`–î–∞–Ω–Ω—ã–µ: ${JSON.stringify(error.response.data)}`);
      }
    } else {
      console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`);
    }
    return text; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}

// –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –≤ –æ–±—ä–µ–∫—Ç–µ
async function translateObject(obj: any, targetLang: string): Promise<any> {
  const result: any = {};
  
  for (const key in obj) {
    if (Array.isArray(obj[key])) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–∏–≤–æ–≤
      result[key] = [];
      for (const item of obj[key]) {
        if (typeof item === 'string') {
          result[key].push(await translateText(item, targetLang));
        } else if (typeof item === 'object' && item !== null) {
          result[key].push(await translateObject(item, targetLang));
        } else {
          result[key].push(item);
        }
      }
    } else if (typeof obj[key] === 'object' && obj[key] !== null) {
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
      result[key] = await translateObject(obj[key], targetLang);
    } else if (typeof obj[key] === 'string') {
      // –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫
      result[key] = await translateText(obj[key], targetLang);
    } else {
      // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
      result[key] = obj[key];
    }
  }
  
  return result;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
function findChangedKeys(sourceObj: any, targetObj: any, path: string = ''): string[] {
  const changedKeys: string[] = [];
  
  for (const key in sourceObj) {
    const currentPath = path ? `${path}.${key}` : key;
    
    if (!(key in targetObj)) {
      // –ï—Å–ª–∏ –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ü–µ–ª–µ–≤–æ–º –æ–±—ä–µ–∫—Ç–µ
      changedKeys.push(currentPath);
    } else if (typeof sourceObj[key] === 'object' && sourceObj[key] !== null && 
               typeof targetObj[key] === 'object' && targetObj[key] !== null && 
               !Array.isArray(sourceObj[key]) && !Array.isArray(targetObj[key])) {
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
      changedKeys.push(...findChangedKeys(sourceObj[key], targetObj[key], currentPath));
    } else if (typeof sourceObj[key] === 'string' && typeof targetObj[key] === 'string') {
      // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
      if (sourceObj[key] !== targetObj[key]) {
        changedKeys.push(currentPath);
      }
    } else if (JSON.stringify(sourceObj[key]) !== JSON.stringify(targetObj[key])) {
      // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
      changedKeys.push(currentPath);
    }
  }
  
  return changedKeys;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –ø—É—Ç–∏ –≤ –æ–±—ä–µ–∫—Ç–µ
function getValueByPath(obj: any, path: string): any {
  const parts = path.split('.');
  let current = obj;
  
  for (const part of parts) {
    if (current === null || current === undefined || typeof current !== 'object') {
      return undefined;
    }
    current = current[part];
  }
  
  return current;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –ø—É—Ç–∏ –≤ –æ–±—ä–µ–∫—Ç–µ
function setValueByPath(obj: any, path: string, value: any): void {
  const parts = path.split('.');
  let current = obj;
  
  for (let i = 0; i < parts.length - 1; i++) {
    const part = parts[i];
    if (!(part in current)) {
      current[part] = {};
    }
    current = current[part];
  }
  
  current[parts[parts.length - 1]] = value;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∏ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –ø–µ—Ä–µ–≤–æ–¥–µ
async function updateTranslations(
  sourceObj: any, 
  targetObj: any, 
  targetLang: string,
  baseObj: any = null // –ë–∞–∑–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–ø—Ä–µ–¥—ã–¥—É—â–∞—è –≤–µ—Ä—Å–∏—è sourceObj)
): Promise<any> {
  const result = JSON.parse(JSON.stringify(targetObj)); // –ì–ª—É–±–æ–∫–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
  
  // –ù–∞—Ö–æ–¥–∏–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –±–∞–∑–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  let changedKeys: string[] = [];
  if (baseObj) {
    changedKeys = findChangedKeys(sourceObj, baseObj);
    console.log(`  üîç –ù–∞–π–¥–µ–Ω–æ ${changedKeys.length} –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π`);
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
  for (const path of changedKeys) {
    const sourceValue = getValueByPath(sourceObj, path);
    if (typeof sourceValue === 'string') {
      const translatedValue = await translateText(sourceValue, targetLang);
      setValueByPath(result, path, translatedValue);
      console.log(`  üîÑ –û–±–Ω–æ–≤–ª–µ–Ω –∫–ª—é—á: ${path}`);
    }
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
  for (const key in sourceObj) {
    if (!(key in result)) {
      // –ï—Å–ª–∏ –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ü–µ–ª–µ–≤–æ–º –æ–±—ä–µ–∫—Ç–µ
      if (Array.isArray(sourceObj[key])) {
        // –î–ª—è –º–∞—Å—Å–∏–≤–æ–≤
        result[key] = [];
        for (const item of sourceObj[key]) {
          if (typeof item === 'string') {
            result[key].push(await translateText(item, targetLang));
          } else if (typeof item === 'object' && item !== null) {
            result[key].push(await translateObject(item, targetLang));
          } else {
            result[key].push(item);
          }
        }
      } else if (typeof sourceObj[key] === 'object' && sourceObj[key] !== null) {
        // –î–ª—è –æ–±—ä–µ–∫—Ç–æ–≤
        result[key] = await translateObject(sourceObj[key], targetLang);
      } else if (typeof sourceObj[key] === 'string') {
        // –î–ª—è —Å—Ç—Ä–æ–∫
        result[key] = await translateText(sourceObj[key], targetLang);
      } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        result[key] = sourceObj[key];
      }
      console.log(`  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∫–ª—é—á: ${key}`);
    } else if (typeof sourceObj[key] === 'object' && sourceObj[key] !== null && 
               typeof result[key] === 'object' && result[key] !== null && 
               !Array.isArray(sourceObj[key]) && !Array.isArray(result[key])) {
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
      const baseObjKey = baseObj && typeof baseObj === 'object' ? baseObj[key] : null;
      result[key] = await updateTranslations(sourceObj[key], result[key], targetLang, baseObjKey);
    }
  }
  
  return result;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ —Ñ–∞–π–ª–∞
function backupFile(filePath: string): void {
  if (fs.existsSync(filePath)) {
    const backupPath = `${filePath}.bak`;
    fs.copyFileSync(filePath, backupPath);
    console.log(`  üì¶ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: ${backupPath}`);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
async function main() {
  console.log('üåê –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–∞...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    if (!fs.existsSync(translationsDir)) {
      fs.mkdirSync(translationsDir, { recursive: true });
      console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${translationsDir}`);
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –∫–∞–∑–∞—Ö—Å–∫–∏–º –ø–µ—Ä–µ–≤–æ–¥–æ–º
    const sourceFilePath = path.join(translationsDir, 'kk.json');
    if (!fs.existsSync(sourceFilePath)) {
      console.error(`‚ùå –û—à–∏–±–∫–∞: –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª ${sourceFilePath} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      process.exit(1);
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    const sourceData = JSON.parse(fs.readFileSync(sourceFilePath, 'utf8'));
    console.log('üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª kk.json');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–µ—Ä—Å–∏—é –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const backupPath = `${sourceFilePath}.bak`;
    let previousSourceData = null;
    if (fs.existsSync(backupPath)) {
      try {
        previousSourceData = JSON.parse(fs.readFileSync(backupPath, 'utf8'));
        console.log('üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –≤–µ—Ä—Å–∏—è kk.json');
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–µ—Ä—Å–∏—é: ${error}`);
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–≥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    backupFile(sourceFilePath);
    
    // –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –≤—Å–µ —Ü–µ–ª–µ–≤—ã–µ —è–∑—ã–∫–∏
    for (const lang of targetLangs) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–∑–∞—Ö—Å–∫–∏–π —è–∑—ã–∫, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –∏—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫
      if (lang === 'kk') continue;
      
      const targetFilePath = path.join(translationsDir, `${lang}.json`);
      
      console.log(`\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —è–∑—ã–∫–∞: ${lang}`);
      
      let translatedData: any;
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
      if (fs.existsSync(targetFilePath)) {
        console.log(`  üìÑ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª ${lang}.json`);
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
        backupFile(targetFilePath);
        
        const existingData = JSON.parse(fs.readFileSync(targetFilePath, 'utf8'));
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∏ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        console.log(`  üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤...`);
        translatedData = await updateTranslations(sourceData, existingData, lang, previousSourceData);
        console.log(`  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
      } else {
        console.log(`  üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ ${lang}.json`);
        
        // –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        console.log(`  üîÑ –ü–µ—Ä–µ–≤–æ–¥ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫...`);
        translatedData = await translateObject(sourceData, lang);
        console.log(`  ‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω`);
      }
      
      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      fs.writeFileSync(targetFilePath, JSON.stringify(translatedData, null, 2), 'utf8');
      console.log(`  üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª: ${lang}.json`);
    }
    
    console.log('\n‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–≤–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞: ${error}`);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main().catch(error => {
  console.error(`‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`);
  process.exit(1);
});
