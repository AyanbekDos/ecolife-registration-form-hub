// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö JSON-—Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
const fs = require('fs');
const path = require('path');

// –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
const translationsDir = path.join(__dirname, 'src', 'translations');

// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö JSON-—Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
const files = fs.readdirSync(translationsDir)
  .filter(file => file.endsWith('.json') && file !== '.translation-hashes.json');

console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–æ–≤`);

// –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
let totalFilesFixed = 0;
let totalErrors = 0;

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
files.forEach(file => {
  const filePath = path.join(translationsDir, file);
  
  try {
    // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    let content = fs.readFileSync(filePath, 'utf8');
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
    try {
      JSON.parse(content);
      console.log(`‚úÖ ${file}: JSON –≤–∞–ª–∏–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
    } catch (parseError) {
      console.log(`‚ùå ${file}: JSON –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: ${parseError.message}`);
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–∞–≤—ã—á–∫–∞–º–∏ –≤ platformStatus
      if (content.includes('"Platform under construction"') || 
          content.includes('"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"') ||
          content.includes('"Platforma tiek b≈´vƒìta"') ||
          content.includes('"Piattaforma in costruzione"')) {
        
        content = content
          .replace(/"Platform under construction"/g, '"\\\"Platform under construction\\\""')
          .replace(/"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"/g, '"\\\"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\\\""')
          .replace(/"Platforma tiek b≈´vƒìta"/g, '"\\\"Platforma tiek b≈´vƒìta\\\""')
          .replace(/"Piattaforma in costruzione"/g, '"\\\"Piattaforma in costruzione\\\""')
          .replace(/"Plattform im Aufbau"/g, '"\\\"Plattform im Aufbau\\\""');
        
        console.log(`üîß ${file}: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–∞–≤—ã—á–∫–∏ –≤ platformStatus`);
      }
      
      // –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–∏–ª—å–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω (–∫–∞–∫ lv.json), –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –µ–≥–æ
      if (file === 'lv.json' || content.includes('\\\"')) {
        console.log(`üîÑ ${file}: –§–∞–π–ª —Å–∏–ª—å–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É`);
        
        // –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª (kk.json) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        const sourceFilePath = path.join(translationsDir, 'kk.json');
        if (fs.existsSync(sourceFilePath)) {
          try {
            const sourceContent = fs.readFileSync(sourceFilePath, 'utf8');
            const sourceData = JSON.parse(sourceContent);
            
            // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏
            const tempContent = content
              .replace(/\\"/g, '"') // –£–±–∏—Ä–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
              .replace(/",\s*\\"/g, '", "') // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É –∫–ª—é—á–∞–º–∏
              .replace(/"\s*}/g, '" }') // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏
              .replace(/"\s*{/g, '" {') // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏
              .replace(/"\s*,/g, '",') // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—è—Ç—ã–µ
              .replace(/"\s*:/g, '":') // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–æ–µ—Ç–æ—á–∏—è
              .replace(/:\s*"/g, ':"') // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–æ–µ—Ç–æ—á–∏—è —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
              .replace(/\\\\"/g, '\\"'); // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–æ–π–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            const tempFilePath = path.join(translationsDir, `${file}.temp`);
            fs.writeFileSync(tempFilePath, tempContent, 'utf8');
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            try {
              // –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
              const data = {};
              
              // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "–∫–ª—é—á": "–∑–Ω–∞—á–µ–Ω–∏–µ"
              const regex = /"([^"]+)":\s*"([^"]*)"/g;
              let match;
              
              while ((match = regex.exec(tempContent)) !== null) {
                const key = match[1];
                const value = match[2];
                
                // –°—Ç—Ä–æ–∏–º –≤–ª–æ–∂–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ —Ç–æ—á–∫–∞–º –≤ –∫–ª—é—á–µ
                const keyParts = key.split('.');
                let current = data;
                
                for (let i = 0; i < keyParts.length - 1; i++) {
                  if (!current[keyParts[i]]) {
                    current[keyParts[i]] = {};
                  }
                  current = current[keyParts[i]];
                }
                
                current[keyParts[keyParts.length - 1]] = value;
              }
              
              // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
              if (Object.keys(data).length === 0) {
                console.log(`‚ö†Ô∏è ${file}: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ kk.json`);
                fs.copyFileSync(sourceFilePath, filePath);
              } else {
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                fs.writeFileSync(filePath, JSON.stringify(data, null, 2), 'utf8');
              }
              
              // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
              fs.unlinkSync(tempFilePath);
            } catch (tempError) {
              console.error(`‚ùå ${file}: –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: ${tempError.message}`);
              // –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
              fs.copyFileSync(sourceFilePath, filePath);
            }
          } catch (sourceError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: ${sourceError.message}`);
            totalErrors++;
          }
        } else {
          console.error(`‚ùå –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª kk.json –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          totalErrors++;
        }
      } else {
        // –î–ª—è –º–µ–Ω–µ–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –¥–≤–æ–π–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏ –≤ —Å—Ç—Ä–æ–∫–∞—Ö
        content = content.replace(/""([^"]*)""/, '"\\\"$1\\\""');
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        fs.writeFileSync(filePath, content, 'utf8');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –ª–∏ —Ñ–∞–π–ª
      try {
        JSON.parse(fs.readFileSync(filePath, 'utf8'));
        console.log(`‚úÖ ${file}: JSON —Ç–µ–ø–µ—Ä—å –≤–∞–ª–∏–¥–µ–Ω`);
        totalFilesFixed++;
      } catch (finalError) {
        console.error(`‚ùå ${file}: JSON –≤—Å–µ –µ—â–µ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${finalError.message}`);
        totalErrors++;
      }
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${file}: ${error.message}`);
    totalErrors++;
  }
});

console.log(`\nüìä –ò—Ç–æ–≥–∏:`);
console.log(`üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`);
console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${totalFilesFixed}`);
console.log(`‚ùå –û—à–∏–±–æ–∫: ${totalErrors}`);
